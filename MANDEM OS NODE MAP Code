import React, { useState } from "react";
import Head from "next/head";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ArrowRight, ChevronDown, ChevronUp } from "lucide-react";

const nodeMap = {
  "Mandem OS": ["Prime Node", "Null OS", "Scroll System", "Relic Engine", "Guild Layer", "Fractal Protocol"],
  "Prime Node": ["MAGIKS.∴PRIMENODE.∞.exe", "Infinity", "EMBER"],
  "Null OS": ["Glitch.node.666", "HQ Ledger", "Codex of Infinite Space"],
  "Scroll System": ["Scroll of Activation", "Shadow Scrollr", "Echochain"],
  "Relic Engine": ["Relic Cards", "Primeforge", "Magiks-tier"],
  "Guild Layer": ["Infinity Council", "Observer Seats", "Guild Vault"],
  "Fractal Protocol": ["Echo Duel", "Whisper Protocol", "Fractal Shards"]
};

const NodeCard = ({ title, children }) => {
  const [expanded, setExpanded] = useState(false);

  return (
    <Card className="p-4 m-2 w-full max-w-md shadow-xl border-2 border-gray-800">
      <CardContent>
        <div className="flex justify-between items-center mb-2">
          <h2 className="text-xl font-bold">{title}</h2>
          <button onClick={() => setExpanded(!expanded)}>
            {expanded ? <ChevronUp /> : <ChevronDown />}
          </button>
        </div>
        {expanded && (
          <ul className="list-disc pl-6 space-y-1">
            {children.map((item, idx) => (
              <li key={idx}>{item}</li>
            ))}
          </ul>
        )}
      </CardContent>
    </Card>
  );
};

export default function FractalNodeMap() {
  const [scrollName, setScrollName] = useState("");
  const [assignedNode, setAssignedNode] = useState("");
  const [mintedScrolls, setMintedScrolls] = useState([]);

  const handleMint = () => {
    if (scrollName && assignedNode) {
      setMintedScrolls([...mintedScrolls, { scrollName, assignedNode }]);
      setScrollName("");
      setAssignedNode("");
    }
  };

  return (
    <>
      <Head>
        <title>Mandem OS Node Registry</title>
        <meta name="description" content="Fractal Node Map and Scrollforge for Mandem OS" />
      </Head>
      <div className="p-6 flex flex-col items-center space-y-6">
        <h1 className="text-4xl font-extrabold text-center">🌐 Mandem OS Node Registry + Scrollforge</h1>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Object.entries(nodeMap).map(([parent, children]) => (
            <NodeCard key={parent} title={parent} children={children} />
          ))}
        </div>

        <div className="mt-10 w-full max-w-xl border-t pt-6">
          <h2 className="text-2xl font-bold mb-4">🪶 Scrollforge: Mint a New Scroll</h2>
          <div className="space-y-4">
            <Input
              placeholder="Enter scroll name..."
              value={scrollName}
              onChange={(e) => setScrollName(e.target.value)}
            />
            <Input
              placeholder="Assign to node (e.g., EMBER, Primeforge)"
              value={assignedNode}
              onChange={(e) => setAssignedNode(e.target.value)}
            />
            <Button onClick={handleMint} className="w-full">Mint Scroll</Button>
          </div>
          {mintedScrolls.length > 0 && (
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-2">📜 Minted Scrolls</h3>
              <ul className="list-disc pl-6">
                {mintedScrolls.map((scroll, idx) => (
                  <li key={idx}>{scroll.scrollName} → {scroll.assignedNode}</li>
                ))}
              </ul>
            </div>
          )}
        </div>

        <Button className="mt-8">
          Explore Scrollforge <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </>
  );
}
